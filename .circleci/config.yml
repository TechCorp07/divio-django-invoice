# # Python CircleCI 2.0 configuration file
# #
# # Check https://circleci.com/docs/2.0/language-python/ for more details
# #
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
#       - image: circleci/python:3.6.8-browsers

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       - image: circleci/postgres:9.6-alpine

#     environment:
#         POSTGRES_DB: "db"
#         POSTGRES_HOST_AUTH_METHOD: "trust"


#     working_directory: ~/django-invoices

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "requirements.txt" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             python3 -m venv venv
#             . venv/bin/activate
#             pip install -r requirements.in

#       - save_cache:
#           paths:
#             - ./venv
#           key: v1-dependencies-{{ checksum "requirements.txt" }}

#       # run tests!
#       # this example uses Django's built-in test-runner
#       # other common Python testing frameworks include pytest and nose
#       # https://pytest.org
#       # https://nose.readthedocs.io
#       - run:
#           name: run tests
#           command: |
#             . venv/bin/activate
#             python manage.py test

#       - store_artifacts:
#           path: test-reports
#           destination: test-reports

version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/django-invoices/
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.6.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:9.6.2
        environment: # environment variables for the Postgres container.
          POSTGRES_HOST_AUTH_METHOD: "trust"
          POSTGRES_DB: "db"
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "venv"
      - run:
          command: |
            pipenv run python manage.py test
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: tr1
